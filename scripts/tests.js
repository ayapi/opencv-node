// Generated by CoffeeScript 1.3.3
(function() {
  var Mat, Results, SAME_EVERYTHING, SAME_HEIGHT, SAME_WIDTH, SAME_WIDTH_HEIGHT, SAME_WIDTH_HEIGHT_TYPE, cv, init, mustThrow, ok, test;

  cv = require('./opencv');

  Mat = cv.Mat;

  Results = {
    failed: 0,
    passed: 0,
    total: 0
  };

  ok = function(expr, message) {
    Results.total++;
    if (expr !== true) {
      console.log("FAILED: " + message);
      process.exit(-1);
      return Results.failed++;
    } else {
      console.log("PASSED: " + message);
      return Results.passed++;
    }
  };

  mustThrow = function(name, fn) {
    var excepted;
    excepted = false;
    try {
      fn();
    } catch (e) {
      excepted = true;
    }
    if (!excepted) {
      return ok(false, "Exception not thrown for '" + name + "'");
    } else {
      return ok(true, "Exception thrown for '" + name);
    }
  };

  test = function(name, fnTest) {
    console.log("*****");
    console.log(name);
    try {
      return fnTest();
    } catch (e) {
      return ok(false, "Exception thrown for '" + name + "': " + e.message);
    }
  };

  SAME_WIDTH = function(src, dst) {
    return src.width === dst.width;
  };

  SAME_HEIGHT = function(src, dst) {
    return src.height === dst.height;
  };

  SAME_WIDTH_HEIGHT = function(src, dst) {
    return src.width === dst.width && src.height === dst.height;
  };

  SAME_WIDTH_HEIGHT_TYPE = function(src, dst) {
    return SAME_WIDTH_HEIGHT(src, dst) && src.type === dst.type;
  };

  SAME_EVERYTHING = function(src, dst) {
    return SAME_WIDTH_HEIGHT_TYPE(src, dst) && src.channels === dst.channels && src.depth === dst.depth && src.total === dst.total && src.isContinuous === dst.isContinuous && src.elemSize === dst.elemSize && src.empty === dst.empty;
  };

  init = function(width, height, format) {
    var srcMat;
    console.log("Starting tests");
    srcMat = new Mat({
      width: width,
      height: height
    }, format);
    srcMat.setTo([0, 0, 0]);
    test("createMat", function() {
      var mat1;
      mustThrow("new Mat(156, undefined)", function() {
        return new Mat(156, undefined);
      });
      mat1 = new Mat(155, 156);
      ok(mat1.width === 156 && mat1.height === 155, "Mat1 width/height");
      ok(mat1.type === cv.CV_8UC3, "Type of mat created with int parameters");
      mat1 = new Mat(srcMat);
      ok(mat1.width === srcMat.width && mat1.height === srcMat.height && mat1.type === srcMat.type && mat1.depth === srcMat.depth && mat1.channels === srcMat.channels, "Width/height/channels/depth of matrix created with Mat parameter");
      mat1 = new Mat({
        width: 123,
        height: 124
      }, cv.CV_8UC4);
      ok(mat1.width === 123 && mat1.height === 124, "Width/height of Mat created with Size param");
      ok(mat1.type === cv.CV_8UC4, "Type of mat created with size param");
      mat1 = new Mat(srcMat, {
        x: 20,
        y: 20,
        width: 100,
        height: 100
      });
      ok(mat1.type === srcMat.type, "Type of matrix created with Mat and RECT params");
      ok(mat1.width === 100, "Width of mat created with RECT param");
      ok(mat1.height === 100, "Height of mat created with RECT param");
      mustThrow("new Mat(100)", function() {
        return mat1 = new Mat(100);
      });
      mustThrow("new Mat(100, 0)", function() {
        return mat1 = new Mat(100, 0);
      });
      mustThrow("new Mat(-100, 100)", function() {
        return mat1 = new Mat(-100, 0);
      });
      return mustThrow("new Mat({width: 324}, 12)", function() {
        return mat1 = new Mat({
          width: 324
        }, 12);
      });
    });
    test("range", function() {
      var colsMat, myRange;
      ok(srcMat.channels === 3, "3 channels");
      myRange = srcMat.colRange(10, 20);
      mustThrow("Invalid col range", function() {
        return srcMat.colRange(0, width + 1);
      });
      mustThrow("Invalid col range 2", function() {
        return srcMat.colRange(10, 2);
      });
      mustThrow("Invalid col range 3", function() {
        return srcMat.colRange(-21, width);
      });
      colsMat = srcMat.colRange(0, width);
      ok(colsMat.width === width, "Width must be equal");
      ok(colsMat.height === height, "Height must be equal");
      mustThrow("Invalid row range", function() {
        return srcMat.rowRange(0, height + 1);
      });
      mustThrow("Invalid row range 2", function() {
        return srcMat.rowRange(10, 2);
      });
      return mustThrow("Invalid row range 3", function() {
        return srcMat.rowRange(-21, width);
      });
    });
    test("clone", function() {
      var cloned;
      cloned = srcMat.clone();
      console.log("Sizes: " + srcMat.size.width + "x" + srcMat.size.height + "-" + cloned.size.width + "x" + cloned.size.height);
      return ok(SAME_EVERYTHING(srcMat, cloned), "Cloned matrix must be identical");
    });
    test("copyTo", function() {
      var destMat;
      destMat = void 0;
      mustThrow("Copy to undefined var", function() {
        return srcMat.copyTo(destMat);
      });
      destMat = new Mat(100, 100, cv.CV_8UC3);
      srcMat.copyTo(destMat);
      ok(SAME_EVERYTHING(srcMat, destMat), "Copy to different size matrix");
      destMat = new Mat(height, width, cv.CV_8UC4);
      srcMat.copyTo(destMat);
      ok(SAME_EVERYTHING(srcMat, destMat), "Copy to different depth matrix");
      mustThrow("Copy to RECT argument", function() {
        return srcMat.copyTo({
          width: 1090,
          height: 33
        });
      });
      destMat = new Mat(height, width, cv.CV_8UC3);
      return ok(srcMat.copyTo(destMat) === srcMat, "Copy to good matrix");
    });
    test("setTo", function() {
      mustThrow("setTo(undefined)", function() {
        return srcMat.setTo();
      });
      mustThrow("setTo(1)", function() {
        return srcMat.setTo(1);
      });
      mustThrow("setTo({width: 1900, height: 1000})", function() {
        return srcMat.setTo({
          width: 1900,
          height: 1000
        });
      });
      mustThrow("setTo([])", function() {
        return srcMat.setTo([]);
      });
      mustThrow("setTo([1, 2])", function() {
        return srcMat.setTo([1, 2]);
      });
      return mustThrow("setTo([1, 2, {one: 1}])", function() {
        return srcMat.setTo([
          1, 2, {
            one: 1
          }
        ]);
      });
    });
    ok(srcMat === srcMat.setTo([1, 2, 2]), "srcMat == srcMat.setTo([1, 2, 2])");
    srcMat.setTo([0, 0, 0]);
    ok(srcMat[0] === 0, "mat[0] == 0");
    ok(srcMat[192] === 0, "mat[192] == 0");
    srcMat.setTo([123, 253, 99]);
    ok(srcMat[0] === 123, "mat[0] == 123");
    ok(srcMat[1] === 253, "mat[1] = 253");
    ok(srcMat[2] === 99, "mat[2] = 99");
    ok(srcMat[3] === 123, "mat[3] == 123");
    ok(srcMat[4] === 253, "mat[4] = 253");
    ok(srcMat[5] === 99, "mat[5] = 99");
    srcMat[33] = 22;
    return ok(srcMat[33] === 22, "mat[33] == 22");
  };

  test("mul", function() {
    var mulMat, newMat, srcMat;
    mustThrow("mul(undefined)", function() {
      return srcMat.mul(undefined);
    });
    mustThrow("mul({one: 1})", function() {
      return srcMat.mul({
        one: 1
      });
    });
    mulMat = new Mat(100, 100);
    mustThrow("mul(invalid size matrix)", function() {
      return srcMat.mul(mulMat);
    });
    srcMat = new Mat(100, 100);
    mulMat = new Mat(srcMat.height, srcMat.width, srcMat.type);
    newMat = srcMat.mul(mulMat);
    return ok(SAME_WIDTH_HEIGHT_TYPE(newMat, srcMat), "Multiplied must have same w/h/t");
  });

  test("convertTo", function() {
    var dest, srcMat;
    mustThrow("convertTo(undefined)", function() {
      return srcMat.convertTo(undefined, 1);
    });
    mustThrow("convertTo(1)", function() {
      return srcMat.convertTo(1, 1);
    });
    srcMat = new Mat(100, 100);
    dest = new Mat(1, 1, cv.CV_8UC2);
    srcMat.convertTo(dest, cv.CV_8UC2);
    ok(SAME_WIDTH_HEIGHT(srcMat, dest), "Same width height after convertTo");
    return ok(dest.depth === srcMat.depth, "dest.depth === src.depth");
  });

  test("reshape", function() {
    var res, src;
    src = new Mat(100, 100);
    mustThrow("reshape(-1)", function() {
      return src.reshape(-1);
    });
    mustThrow("reshape(1, -1)", function() {
      return src.reshape(0, -1);
    });
    res = src.reshape(0);
    ok(SAME_EVERYTHING(res, src), "reshaped must be a cloned src");
    res = src.reshape(1, 0);
    return ok(res.width === src.width * 3, "Result width must be 3 * src.width?");
  });

  init(320, 200, cv.CV_8UC3);

  console.log('*** Finished ***');

  console.log(Results);

}).call(this);
